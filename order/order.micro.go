// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order/order.proto

/*
Package go_micro_srv_order is a generated protocol buffer package.

It is generated from these files:
	order/order.proto

It has these top-level messages:
	OrderResponse
	Trade
	OrderID
	OrderRequest
	DeleteResponse
*/
package go_micro_srv_order

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderService service

type OrderServiceClient interface {
	Create(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	Delete(ctx context.Context, in *OrderID, opts ...client.CallOption) (*DeleteResponse, error)
}

type orderServiceClient struct {
	c           client.Client
	serviceName string
}

func NewOrderServiceClient(serviceName string, c client.Client) OrderServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.order"
	}
	return &orderServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *orderServiceClient) Create(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.serviceName, "OrderService.Create", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Delete(ctx context.Context, in *OrderID, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "OrderService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	Create(context.Context, *OrderRequest, *OrderResponse) error
	Delete(context.Context, *OrderID, *DeleteResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&OrderService{hdlr}, opts...))
}

type OrderService struct {
	OrderServiceHandler
}

func (h *OrderService) Create(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.Create(ctx, in, out)
}

func (h *OrderService) Delete(ctx context.Context, in *OrderID, out *DeleteResponse) error {
	return h.OrderServiceHandler.Delete(ctx, in, out)
}
