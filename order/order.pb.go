// Code generated by protoc-gen-gogo.
// source: order/order.proto
// DO NOT EDIT!

/*
	Package go_micro_srv_order is a generated protocol buffer package.

	It is generated from these files:
		order/order.proto

	It has these top-level messages:
		OrderResponse
		Trade
		OrderID
		OrderRequest
		DeleteResponse
*/
package go_micro_srv_order

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type OrderResponse struct {
	OrderNumber int64    `protobuf:"varint,1,opt,name=orderNumber,proto3" json:"orderNumber,omitempty"`
	Trades      []*Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
}

func (m *OrderResponse) Reset()                    { *m = OrderResponse{} }
func (m *OrderResponse) String() string            { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()               {}
func (*OrderResponse) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0} }

func (m *OrderResponse) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type Trade struct {
	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Rate   float64 `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Total  float64 `protobuf:"fixed64,4,opt,name=total,proto3" json:"total,omitempty"`
	Date   int64   `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	Amount float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{1} }

type OrderID struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *OrderID) Reset()                    { *m = OrderID{} }
func (m *OrderID) String() string            { return proto.CompactTextString(m) }
func (*OrderID) ProtoMessage()               {}
func (*OrderID) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{2} }

type OrderRequest struct {
	Type         string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CurrencyPair string  `protobuf:"bytes,2,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
	Rate         float64 `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Amount       float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{3} }

type DeleteResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{4} }

func init() {
	proto.RegisterType((*OrderResponse)(nil), "go.micro.srv.order.OrderResponse")
	proto.RegisterType((*Trade)(nil), "go.micro.srv.order.Trade")
	proto.RegisterType((*OrderID)(nil), "go.micro.srv.order.OrderID")
	proto.RegisterType((*OrderRequest)(nil), "go.micro.srv.order.OrderRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.order.DeleteResponse")
}
func (this *OrderResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderResponse)
	if !ok {
		that2, ok := that.(OrderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrderNumber != that1.OrderNumber {
		return false
	}
	if len(this.Trades) != len(that1.Trades) {
		return false
	}
	for i := range this.Trades {
		if !this.Trades[i].Equal(that1.Trades[i]) {
			return false
		}
	}
	return true
}
func (this *Trade) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Trade)
	if !ok {
		that2, ok := that.(Trade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *OrderID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderID)
	if !ok {
		that2, ok := that.(OrderID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *OrderRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderRequest)
	if !ok {
		that2, ok := that.(OrderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.CurrencyPair != that1.CurrencyPair {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *DeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteResponse)
	if !ok {
		that2, ok := that.(DeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}

type OrderResponseGetter interface {
	GetOrderResponse() *OrderResponse
}

var GraphQLOrderResponseType *github_com_graphql_go_graphql.Object

type TradeGetter interface {
	GetTrade() *Trade
}

var GraphQLTradeType *github_com_graphql_go_graphql.Object

type OrderIDGetter interface {
	GetOrderID() *OrderID
}

var GraphQLOrderIDType *github_com_graphql_go_graphql.Object

type OrderRequestGetter interface {
	GetOrderRequest() *OrderRequest
}

var GraphQLOrderRequestType *github_com_graphql_go_graphql.Object

type DeleteResponseGetter interface {
	GetDeleteResponse() *DeleteResponse
}

var GraphQLDeleteResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLOrderResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_orderOrderResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"orderNumber": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderResponse)
						if ok {
							return obj.OrderNumber, nil
						}
						inter, ok := p.Source.(OrderResponseGetter)
						if ok {
							face := inter.GetOrderResponse()
							if face == nil {
								return nil, nil
							}
							return face.OrderNumber, nil
						}
						return nil, fmt.Errorf("field orderNumber not resolved")
					},
				},
				"trades": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTradeType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderResponse)
						if ok {
							return obj.Trades, nil
						}
						inter, ok := p.Source.(OrderResponseGetter)
						if ok {
							face := inter.GetOrderResponse()
							if face == nil {
								return nil, nil
							}
							return face.Trades, nil
						}
						return nil, fmt.Errorf("field trades not resolved")
					},
				},
			}
		}),
	})
	GraphQLTradeType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_orderTrade",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Type, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Type, nil
						}
						return nil, fmt.Errorf("field type not resolved")
					},
				},
				"rate": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Rate, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Rate, nil
						}
						return nil, fmt.Errorf("field rate not resolved")
					},
				},
				"total": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Total, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Total, nil
						}
						return nil, fmt.Errorf("field total not resolved")
					},
				},
				"date": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Date, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Date, nil
						}
						return nil, fmt.Errorf("field date not resolved")
					},
				},
				"amount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Trade)
						if ok {
							return obj.Amount, nil
						}
						inter, ok := p.Source.(TradeGetter)
						if ok {
							face := inter.GetTrade()
							if face == nil {
								return nil, nil
							}
							return face.Amount, nil
						}
						return nil, fmt.Errorf("field amount not resolved")
					},
				},
			}
		}),
	})
	GraphQLOrderIDType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_orderOrderID",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderID)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(OrderIDGetter)
						if ok {
							face := inter.GetOrderID()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
			}
		}),
	})
	GraphQLOrderRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_orderOrderRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"type": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderRequest)
						if ok {
							return obj.Type, nil
						}
						inter, ok := p.Source.(OrderRequestGetter)
						if ok {
							face := inter.GetOrderRequest()
							if face == nil {
								return nil, nil
							}
							return face.Type, nil
						}
						return nil, fmt.Errorf("field type not resolved")
					},
				},
				"currencyPair": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderRequest)
						if ok {
							return obj.CurrencyPair, nil
						}
						inter, ok := p.Source.(OrderRequestGetter)
						if ok {
							face := inter.GetOrderRequest()
							if face == nil {
								return nil, nil
							}
							return face.CurrencyPair, nil
						}
						return nil, fmt.Errorf("field currencyPair not resolved")
					},
				},
				"rate": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderRequest)
						if ok {
							return obj.Rate, nil
						}
						inter, ok := p.Source.(OrderRequestGetter)
						if ok {
							face := inter.GetOrderRequest()
							if face == nil {
								return nil, nil
							}
							return face.Rate, nil
						}
						return nil, fmt.Errorf("field rate not resolved")
					},
				},
				"amount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*OrderRequest)
						if ok {
							return obj.Amount, nil
						}
						inter, ok := p.Source.(OrderRequestGetter)
						if ok {
							face := inter.GetOrderRequest()
							if face == nil {
								return nil, nil
							}
							return face.Amount, nil
						}
						return nil, fmt.Errorf("field amount not resolved")
					},
				},
			}
		}),
	})
	GraphQLDeleteResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_orderDeleteResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"success": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DeleteResponse)
						if ok {
							return obj.Success, nil
						}
						inter, ok := p.Source.(DeleteResponseGetter)
						if ok {
							face := inter.GetDeleteResponse()
							if face == nil {
								return nil, nil
							}
							return face.Success, nil
						}
						return nil, fmt.Errorf("field success not resolved")
					},
				},
			}
		}),
	})
}
func (m *OrderResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderNumber != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(m.OrderNumber))
	}
	if len(m.Trades) > 0 {
		for _, msg := range m.Trades {
			data[i] = 0x12
			i++
			i = encodeVarintOrder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Trade) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Trade) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(m.Id))
	}
	if len(m.Type) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintOrder(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if m.Rate != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(float64(m.Rate))))
	}
	if m.Total != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(float64(m.Total))))
	}
	if m.Date != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintOrder(data, i, uint64(m.Date))
	}
	if m.Amount != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(float64(m.Amount))))
	}
	return i, nil
}

func (m *OrderID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(m.Id))
	}
	return i, nil
}

func (m *OrderRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrderRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintOrder(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if len(m.CurrencyPair) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintOrder(data, i, uint64(len(m.CurrencyPair)))
		i += copy(data[i:], m.CurrencyPair)
	}
	if m.Rate != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(float64(m.Rate))))
	}
	if m.Amount != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(float64(m.Amount))))
	}
	return i, nil
}

func (m *DeleteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		data[i] = 0x8
		i++
		if m.Success {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Order(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Order(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOrder(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedOrderResponse(r randyOrder, easy bool) *OrderResponse {
	this := &OrderResponse{}
	this.OrderNumber = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.OrderNumber *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Trades = make([]*Trade, v1)
		for i := 0; i < v1; i++ {
			this.Trades[i] = NewPopulatedTrade(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTrade(r randyOrder, easy bool) *Trade {
	this := &Trade{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Type = randStringOrder(r)
	this.Rate = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Rate *= -1
	}
	this.Total = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Total *= -1
	}
	this.Date = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Date *= -1
	}
	this.Amount = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrderID(r randyOrder, easy bool) *OrderID {
	this := &OrderID{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrderRequest(r randyOrder, easy bool) *OrderRequest {
	this := &OrderRequest{}
	this.Type = randStringOrder(r)
	this.CurrencyPair = randStringOrder(r)
	this.Rate = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Rate *= -1
	}
	this.Amount = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Amount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteResponse(r randyOrder, easy bool) *DeleteResponse {
	this := &DeleteResponse{}
	this.Success = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyOrder interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOrder(r randyOrder) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOrder(r randyOrder) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneOrder(r)
	}
	return string(tmps)
}
func randUnrecognizedOrder(r randyOrder, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldOrder(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldOrder(data []byte, r randyOrder, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateOrder(data, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		data = encodeVarintPopulateOrder(data, uint64(v3))
	case 1:
		data = encodeVarintPopulateOrder(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateOrder(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateOrder(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateOrder(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateOrder(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *OrderResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrderNumber != 0 {
		n += 1 + sovOrder(uint64(m.OrderNumber))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *Trade) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Rate != 0 {
		n += 9
	}
	if m.Total != 0 {
		n += 9
	}
	if m.Date != 0 {
		n += 1 + sovOrder(uint64(m.Date))
	}
	if m.Amount != 0 {
		n += 9
	}
	return n
}

func (m *OrderID) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	return n
}

func (m *OrderRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.CurrencyPair)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Rate != 0 {
		n += 9
	}
	if m.Amount != 0 {
		n += 9
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNumber", wireType)
			}
			m.OrderNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OrderNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &Trade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trade) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Rate = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Total = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Amount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPair = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Rate = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Amount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorOrder = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0xae, 0xd3, 0x40,
	0x10, 0xc6, 0xdf, 0x3a, 0x89, 0x1f, 0xcc, 0x7b, 0x3c, 0x89, 0x15, 0x42, 0x8e, 0x41, 0xc6, 0x6c,
	0x65, 0x21, 0xe1, 0x40, 0xb8, 0x01, 0xa4, 0x89, 0x90, 0x08, 0x32, 0x5c, 0xc0, 0x7f, 0x06, 0x63,
	0x29, 0xce, 0x9a, 0xdd, 0x75, 0xa4, 0x94, 0x5c, 0x85, 0x8a, 0x82, 0x03, 0x50, 0x52, 0x52, 0x72,
	0x04, 0xf0, 0x29, 0x28, 0x91, 0xc7, 0x26, 0x71, 0x20, 0xd0, 0x58, 0xf3, 0x7d, 0xfb, 0xed, 0xcc,
	0x6f, 0x47, 0x86, 0x9b, 0x52, 0x65, 0xa8, 0x66, 0xf4, 0x0d, 0x2b, 0x25, 0x8d, 0xe4, 0x3c, 0x97,
	0x61, 0x59, 0xa4, 0x4a, 0x86, 0x5a, 0x6d, 0x43, 0x3a, 0x71, 0x1f, 0xe6, 0x85, 0x79, 0x5b, 0x27,
	0x61, 0x2a, 0xcb, 0x59, 0x2e, 0x73, 0x39, 0xa3, 0x68, 0x52, 0xbf, 0x21, 0x45, 0x82, 0xaa, 0xae,
	0x85, 0xfb, 0x68, 0x10, 0x97, 0x95, 0x46, 0x3c, 0xe4, 0x49, 0x76, 0x17, 0xa8, 0xec, 0x6e, 0x88,
	0x0c, 0x6e, 0xac, 0xda, 0x49, 0x11, 0xea, 0x4a, 0x6e, 0x34, 0x72, 0x1f, 0x2e, 0x68, 0xf4, 0x8b,
	0xba, 0x4c, 0x50, 0x39, 0xcc, 0x67, 0xc1, 0x28, 0x1a, 0x5a, 0xfc, 0x31, 0xd8, 0x46, 0xc5, 0x19,
	0x6a, 0xc7, 0xf2, 0x47, 0xc1, 0xc5, 0x7c, 0x1a, 0xfe, 0x0d, 0x1e, 0xbe, 0x6e, 0x13, 0x51, 0x1f,
	0x14, 0xef, 0x19, 0x4c, 0xc8, 0xe1, 0x57, 0x60, 0x15, 0x59, 0xdf, 0xd5, 0x2a, 0x32, 0xce, 0x61,
	0x6c, 0x76, 0x15, 0x3a, 0x96, 0xcf, 0x82, 0xeb, 0x11, 0xd5, 0xad, 0xa7, 0x62, 0x83, 0xce, 0xc8,
	0x67, 0x01, 0x8b, 0xa8, 0xe6, 0xb7, 0x60, 0x62, 0xa4, 0x89, 0xd7, 0xce, 0x98, 0xcc, 0x4e, 0xb4,
	0xc9, 0xac, 0x4d, 0x4e, 0xa8, 0x1f, 0xd5, 0xfc, 0x36, 0xd8, 0x71, 0x29, 0xeb, 0x8d, 0x71, 0x6c,
	0x8a, 0xf6, 0x4a, 0x4c, 0xe1, 0x9c, 0x5e, 0xba, 0x5c, 0xfc, 0x09, 0x21, 0x14, 0x5c, 0xf6, 0x4b,
	0x78, 0x57, 0xa3, 0x36, 0x7b, 0x28, 0x36, 0x80, 0x12, 0x70, 0x99, 0xd6, 0x4a, 0xe1, 0x26, 0xdd,
	0xbd, 0x8c, 0x0b, 0xd5, 0x03, 0x1f, 0x79, 0x27, 0xc1, 0x0f, 0x38, 0xe3, 0x23, 0x9c, 0x07, 0x70,
	0xb5, 0xc0, 0x35, 0x1a, 0xdc, 0x6f, 0xde, 0x81, 0x73, 0x5d, 0xa7, 0x29, 0x6a, 0x4d, 0x83, 0xaf,
	0x45, 0xbf, 0xe5, 0xfc, 0x13, 0xeb, 0x01, 0x5f, 0xa1, 0xda, 0x16, 0x29, 0xf2, 0x15, 0xd8, 0xcf,
	0x14, 0xb6, 0xed, 0xfd, 0x53, 0xcb, 0x1f, 0x3e, 0xc6, 0xbd, 0xff, 0x9f, 0x44, 0x37, 0x59, 0x9c,
	0xf1, 0xe7, 0x60, 0x77, 0x34, 0xfc, 0xce, 0x3f, 0xe3, 0xcb, 0x85, 0x2b, 0x4e, 0x1d, 0x1e, 0x3f,
	0x43, 0x9c, 0x3d, 0xbd, 0xfb, 0xf3, 0x87, 0xc7, 0x3e, 0x36, 0x1e, 0xfb, 0xdc, 0x78, 0xec, 0x6b,
	0xe3, 0xb1, 0x6f, 0x8d, 0xc7, 0xbe, 0x37, 0x1e, 0xfb, 0xf2, 0xe1, 0x1e, 0x4b, 0x6c, 0xfa, 0xf1,
	0x9e, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x50, 0x92, 0xca, 0x94, 0x02, 0x03, 0x00, 0x00,
}
