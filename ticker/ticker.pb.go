// Code generated by protoc-gen-gogo.
// source: ticker/ticker.proto
// DO NOT EDIT!

/*
	Package go_micro_srv_ticker is a generated protocol buffer package.

	It is generated from these files:
		ticker/ticker.proto

	It has these top-level messages:
		TickerList
		CoinItem
		GetRequest
*/
package go_micro_srv_ticker

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type TickerList struct {
	Items []*CoinItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *TickerList) Reset()                    { *m = TickerList{} }
func (m *TickerList) String() string            { return proto.CompactTextString(m) }
func (*TickerList) ProtoMessage()               {}
func (*TickerList) Descriptor() ([]byte, []int) { return fileDescriptorTicker, []int{0} }

func (m *TickerList) GetItems() []*CoinItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type CoinItem struct {
	CurrencyPair  string  `protobuf:"bytes,1,opt,name=currencyPair,proto3" json:"currencyPair,omitempty"`
	Last          float64 `protobuf:"fixed64,2,opt,name=last,proto3" json:"last,omitempty"`
	LowestAsk     float64 `protobuf:"fixed64,3,opt,name=lowestAsk,proto3" json:"lowestAsk,omitempty"`
	HighestBid    float64 `protobuf:"fixed64,4,opt,name=highestBid,proto3" json:"highestBid,omitempty"`
	PercentChange float64 `protobuf:"fixed64,5,opt,name=percentChange,proto3" json:"percentChange,omitempty"`
	BaseVolume    float64 `protobuf:"fixed64,6,opt,name=baseVolume,proto3" json:"baseVolume,omitempty"`
	QuoteVolume   float64 `protobuf:"fixed64,7,opt,name=quoteVolume,proto3" json:"quoteVolume,omitempty"`
	Frozen        bool    `protobuf:"varint,8,opt,name=frozen,proto3" json:"frozen,omitempty"`
	High24Hr      float64 `protobuf:"fixed64,9,opt,name=high24hr,proto3" json:"high24hr,omitempty"`
	Low24Hr       float64 `protobuf:"fixed64,10,opt,name=low24hr,proto3" json:"low24hr,omitempty"`
}

func (m *CoinItem) Reset()                    { *m = CoinItem{} }
func (m *CoinItem) String() string            { return proto.CompactTextString(m) }
func (*CoinItem) ProtoMessage()               {}
func (*CoinItem) Descriptor() ([]byte, []int) { return fileDescriptorTicker, []int{1} }

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTicker, []int{2} }

func init() {
	proto.RegisterType((*TickerList)(nil), "go.micro.srv.ticker.TickerList")
	proto.RegisterType((*CoinItem)(nil), "go.micro.srv.ticker.CoinItem")
	proto.RegisterType((*GetRequest)(nil), "go.micro.srv.ticker.GetRequest")
}
func (this *TickerList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TickerList)
	if !ok {
		that2, ok := that.(TickerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CoinItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CoinItem)
	if !ok {
		that2, ok := that.(CoinItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CurrencyPair != that1.CurrencyPair {
		return false
	}
	if this.Last != that1.Last {
		return false
	}
	if this.LowestAsk != that1.LowestAsk {
		return false
	}
	if this.HighestBid != that1.HighestBid {
		return false
	}
	if this.PercentChange != that1.PercentChange {
		return false
	}
	if this.BaseVolume != that1.BaseVolume {
		return false
	}
	if this.QuoteVolume != that1.QuoteVolume {
		return false
	}
	if this.Frozen != that1.Frozen {
		return false
	}
	if this.High24Hr != that1.High24Hr {
		return false
	}
	if this.Low24Hr != that1.Low24Hr {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}

type TickerListGetter interface {
	GetTickerList() *TickerList
}

var GraphQLTickerListType *github_com_graphql_go_graphql.Object

type CoinItemGetter interface {
	GetCoinItem() *CoinItem
}

var GraphQLCoinItemType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLTickerListType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_tickerTickerList",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"items": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLCoinItemType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TickerList)
						if ok {
							return obj.Items, nil
						}
						inter, ok := p.Source.(TickerListGetter)
						if ok {
							face := inter.GetTickerList()
							if face == nil {
								return nil, nil
							}
							return face.Items, nil
						}
						return nil, fmt.Errorf("field items not resolved")
					},
				},
			}
		}),
	})
	GraphQLCoinItemType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "go_micro_srv_tickerCoinItem",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"currencyPair": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.CurrencyPair, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.CurrencyPair, nil
						}
						return nil, fmt.Errorf("field currencyPair not resolved")
					},
				},
				"last": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.Last, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.Last, nil
						}
						return nil, fmt.Errorf("field last not resolved")
					},
				},
				"lowestAsk": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.LowestAsk, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.LowestAsk, nil
						}
						return nil, fmt.Errorf("field lowestAsk not resolved")
					},
				},
				"highestBid": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.HighestBid, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.HighestBid, nil
						}
						return nil, fmt.Errorf("field highestBid not resolved")
					},
				},
				"percentChange": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.PercentChange, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.PercentChange, nil
						}
						return nil, fmt.Errorf("field percentChange not resolved")
					},
				},
				"baseVolume": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.BaseVolume, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.BaseVolume, nil
						}
						return nil, fmt.Errorf("field baseVolume not resolved")
					},
				},
				"quoteVolume": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.QuoteVolume, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.QuoteVolume, nil
						}
						return nil, fmt.Errorf("field quoteVolume not resolved")
					},
				},
				"frozen": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.Frozen, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.Frozen, nil
						}
						return nil, fmt.Errorf("field frozen not resolved")
					},
				},
				"high24hr": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.High24Hr, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.High24Hr, nil
						}
						return nil, fmt.Errorf("field high24hr not resolved")
					},
				},
				"low24hr": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Float,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinItem)
						if ok {
							return obj.Low24Hr, nil
						}
						inter, ok := p.Source.(CoinItemGetter)
						if ok {
							face := inter.GetCoinItem()
							if face == nil {
								return nil, nil
							}
							return face.Low24Hr, nil
						}
						return nil, fmt.Errorf("field low24hr not resolved")
					},
				},
			}
		}),
	})
}
func (m *TickerList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TickerList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintTicker(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CoinItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CoinItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPair) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTicker(data, i, uint64(len(m.CurrencyPair)))
		i += copy(data[i:], m.CurrencyPair)
	}
	if m.Last != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.Last))))
	}
	if m.LowestAsk != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.LowestAsk))))
	}
	if m.HighestBid != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.HighestBid))))
	}
	if m.PercentChange != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.PercentChange))))
	}
	if m.BaseVolume != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.BaseVolume))))
	}
	if m.QuoteVolume != 0 {
		data[i] = 0x39
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.QuoteVolume))))
	}
	if m.Frozen {
		data[i] = 0x40
		i++
		if m.Frozen {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.High24Hr != 0 {
		data[i] = 0x49
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.High24Hr))))
	}
	if m.Low24Hr != 0 {
		data[i] = 0x51
		i++
		i = encodeFixed64Ticker(data, i, uint64(math.Float64bits(float64(m.Low24Hr))))
	}
	return i, nil
}

func (m *GetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Ticker(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ticker(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTicker(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTickerList(r randyTicker, easy bool) *TickerList {
	this := &TickerList{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Items = make([]*CoinItem, v1)
		for i := 0; i < v1; i++ {
			this.Items[i] = NewPopulatedCoinItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCoinItem(r randyTicker, easy bool) *CoinItem {
	this := &CoinItem{}
	this.CurrencyPair = randStringTicker(r)
	this.Last = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Last *= -1
	}
	this.LowestAsk = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.LowestAsk *= -1
	}
	this.HighestBid = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.HighestBid *= -1
	}
	this.PercentChange = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.PercentChange *= -1
	}
	this.BaseVolume = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.BaseVolume *= -1
	}
	this.QuoteVolume = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.QuoteVolume *= -1
	}
	this.Frozen = bool(bool(r.Intn(2) == 0))
	this.High24Hr = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.High24Hr *= -1
	}
	this.Low24Hr = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Low24Hr *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRequest(r randyTicker, easy bool) *GetRequest {
	this := &GetRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTicker interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTicker(r randyTicker) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTicker(r randyTicker) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneTicker(r)
	}
	return string(tmps)
}
func randUnrecognizedTicker(r randyTicker, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTicker(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTicker(data []byte, r randyTicker, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTicker(data, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		data = encodeVarintPopulateTicker(data, uint64(v3))
	case 1:
		data = encodeVarintPopulateTicker(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTicker(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTicker(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTicker(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTicker(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *TickerList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTicker(uint64(l))
		}
	}
	return n
}

func (m *CoinItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.CurrencyPair)
	if l > 0 {
		n += 1 + l + sovTicker(uint64(l))
	}
	if m.Last != 0 {
		n += 9
	}
	if m.LowestAsk != 0 {
		n += 9
	}
	if m.HighestBid != 0 {
		n += 9
	}
	if m.PercentChange != 0 {
		n += 9
	}
	if m.BaseVolume != 0 {
		n += 9
	}
	if m.QuoteVolume != 0 {
		n += 9
	}
	if m.Frozen {
		n += 2
	}
	if m.High24Hr != 0 {
		n += 9
	}
	if m.Low24Hr != 0 {
		n += 9
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTicker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTicker(x uint64) (n int) {
	return sovTicker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TickerList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CoinItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTicker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPair = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestAsk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.LowestAsk = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestBid", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.HighestBid = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentChange", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.PercentChange = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.BaseVolume = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteVolume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.QuoteVolume = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field High24Hr", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.High24Hr = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low24Hr", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Low24Hr = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTicker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTicker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTicker(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTicker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicker(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTicker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTicker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTicker(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTicker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicker   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTicker = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0xd9, 0xfc, 0x71, 0x7c, 0x93, 0xa4, 0xd9, 0x48, 0x68, 0x65, 0x05, 0xc7, 0xb2, 0x28,
	0xdc, 0xe0, 0x43, 0x17, 0x5e, 0xe0, 0x92, 0x22, 0x42, 0x4a, 0x81, 0x0c, 0xa2, 0xa3, 0xb0, 0xcd,
	0xc4, 0x5e, 0xc5, 0xf6, 0x5e, 0x76, 0xd7, 0x89, 0xe0, 0x71, 0xa8, 0x78, 0x02, 0x44, 0x49, 0x49,
	0xc9, 0x23, 0x80, 0x9f, 0x82, 0x12, 0xdd, 0x2c, 0x17, 0xdf, 0x49, 0x57, 0x79, 0xbe, 0xef, 0xfb,
	0xcd, 0x78, 0xa4, 0x59, 0x38, 0xb1, 0xb2, 0xbc, 0x45, 0x3d, 0x75, 0x9f, 0x74, 0xa1, 0x95, 0x55,
	0xfc, 0xa4, 0x52, 0x69, 0x2b, 0x4b, 0xad, 0x52, 0xa3, 0xef, 0x53, 0x17, 0x05, 0x2f, 0x2a, 0x69,
	0xeb, 0xbe, 0x48, 0x4b, 0xd5, 0x4e, 0x2b, 0x55, 0xa9, 0x29, 0xb1, 0x45, 0x7f, 0x43, 0x8a, 0x04,
	0x55, 0x6e, 0x46, 0xf0, 0x72, 0x0d, 0x57, 0x0b, 0x83, 0x38, 0xf2, 0x24, 0x5d, 0x03, 0x95, 0xae,
	0x23, 0x9e, 0x03, 0xbc, 0xa3, 0x5f, 0x5d, 0x4b, 0x63, 0xf9, 0x39, 0xec, 0x4b, 0x8b, 0xad, 0x11,
	0x2c, 0xda, 0x4d, 0x0e, 0x67, 0xcf, 0xd2, 0x2d, 0x3b, 0xa5, 0x97, 0x4a, 0x76, 0xaf, 0x2d, 0xb6,
	0x99, 0x63, 0xe3, 0x6f, 0x3b, 0xe0, 0xaf, 0x3c, 0x1e, 0xc3, 0x51, 0xd9, 0x6b, 0x8d, 0x5d, 0xf9,
	0xe9, 0x4d, 0x2e, 0xb5, 0x60, 0x11, 0x4b, 0x26, 0xd9, 0x86, 0xc7, 0x39, 0xec, 0x35, 0xb9, 0xb1,
	0x62, 0x27, 0x62, 0x09, 0xcb, 0xa8, 0xe6, 0xa7, 0x30, 0x69, 0xd4, 0x03, 0x1a, 0x3b, 0x37, 0xb7,
	0x62, 0x97, 0x82, 0xd1, 0xe0, 0x21, 0x40, 0x2d, 0xab, 0x1a, 0x8d, 0xbd, 0x90, 0x1f, 0xc5, 0x1e,
	0xc5, 0x6b, 0x0e, 0x7f, 0x0e, 0xc7, 0x0b, 0xd4, 0x25, 0x76, 0xf6, 0xb2, 0xce, 0xbb, 0x0a, 0xc5,
	0x3e, 0x21, 0x9b, 0xe6, 0x72, 0x4a, 0x91, 0x1b, 0x7c, 0xaf, 0x9a, 0xbe, 0x45, 0xe1, 0xb9, 0x29,
	0xa3, 0xc3, 0x23, 0x38, 0xbc, 0xeb, 0x95, 0x5d, 0x01, 0x07, 0x04, 0xac, 0x5b, 0xfc, 0x29, 0x78,
	0x37, 0x5a, 0x7d, 0xc6, 0x4e, 0xf8, 0x11, 0x4b, 0xfc, 0xec, 0xbf, 0xe2, 0x01, 0xf8, 0xcb, 0x6d,
	0x66, 0xaf, 0x6a, 0x2d, 0x26, 0xd4, 0xf6, 0xa8, 0xb9, 0x80, 0x83, 0x46, 0x3d, 0x50, 0x04, 0x14,
	0xad, 0x64, 0x7c, 0x04, 0x70, 0x85, 0x36, 0xc3, 0xbb, 0x1e, 0x8d, 0x9d, 0x7d, 0x80, 0x63, 0x77,
	0x89, 0xb7, 0xa8, 0xef, 0x65, 0x89, 0xfc, 0x1a, 0xbc, 0x2b, 0xb4, 0xf3, 0xa6, 0xe1, 0x67, 0x5b,
	0xef, 0x30, 0xf6, 0x06, 0xdb, 0x81, 0xf1, 0xb0, 0xf1, 0x93, 0x8b, 0xd3, 0xbf, 0x7f, 0x42, 0xf6,
	0x75, 0x08, 0xd9, 0xf7, 0x21, 0x64, 0x3f, 0x87, 0x90, 0xfd, 0x1a, 0x42, 0xf6, 0x7b, 0x08, 0xd9,
	0x8f, 0x2f, 0x67, 0xac, 0xf0, 0xe8, 0x35, 0x9c, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x8f,
	0x72, 0xac, 0x9a, 0x02, 0x00, 0x00,
}
